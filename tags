!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
029l	my.vim	/^normal! 029l$/;"	m
BACKLOG	include/ss_socket.h	10;"	d
CR	include/ss_config.h	19;"	d
CRLF	include/ss_config.h	20;"	d
LF	include/ss_config.h	18;"	d
SS_ALLOC_SIZE	include/ss_mem.h	6;"	d
SS_CONFIG_FILE	main.c	4;"	d	file:
SS_EPOLL_SIZE	include/ss_event.h	10;"	d
SS_EPOLL_WAIT_TIME	include/ss_event.h	13;"	d
SS_ERRLOG_NAME	main.c	3;"	d	file:
SS_FILE_ACCESS	include/ss_file.h	17;"	d
SS_FILE_APPEND	include/ss_file.h	13;"	d
SS_FILE_NONBLOCK	include/ss_file.h	16;"	d
SS_FILE_OPEN_OR_CREAT	include/ss_file.h	14;"	d
SS_FILE_RDONLY	include/ss_file.h	11;"	d
SS_FILE_RDWR	include/ss_file.h	10;"	d
SS_FILE_TRUNC	include/ss_file.h	15;"	d
SS_FILE_WRONLY	include/ss_file.h	12;"	d
SS_FORMAT_TIME_LEN	include/ss_time.h	7;"	d
SS_HTTP_BAD_REQUEST	include/ss_event.h	22;"	d
SS_HTTP_FORBIDDEN	include/ss_event.h	20;"	d
SS_HTTP_NOT_FOUND	include/ss_event.h	21;"	d
SS_HTTP_OK	include/ss_event.h	19;"	d
SS_KP_ALIVE	include/ss_event.h	25;"	d
SS_KP_ALIVE_TIMEOUT	include/ss_event.h	26;"	d
SS_LOG_MAX_LEN	include/ss_log.h	7;"	d
SS_MAX_CONNECTIONS	include/ss_event.h	11;"	d
SS_MAX_HEADER	include/ss_event.h	17;"	d
SS_MAX_REQUEST_LINE	include/ss_event.h	16;"	d
SS_NEVENTS	include/ss_event.h	12;"	d
SS_POOL_SIZE	include/ss_mem.h	7;"	d
SessionLoad	my.vim	/^let SessionLoad = 1$/;"	v
_GNU_SOURCE	include/ss_core.h	3;"	d
__SS_CONFIG_H__	include/ss_config.h	2;"	d
__SS_CORE_H__	include/ss_core.h	2;"	d
__SS_EVENT_H__	include/ss_event.h	2;"	d
__SS_FILE_H__	include/ss_file.h	2;"	d
__SS_LOG_C__	ss_log.c	2;"	d	file:
__SS_LOG_H__	include/ss_log.h	2;"	d
__SS_MEM_H__	include/ss_mem.h	2;"	d
__SS_SOCKET_H__	include/ss_socket.h	2;"	d
__SS_STR_H__	include/ss_str.h	2;"	d
__SS_TIME_H__	include/ss_time.h	2;"	d
args	include/ss_event.h	/^    ss_str_t    args;$/;"	m	struct:ss_http_request_s
clinums	ss_event.c	/^static  ss_uint_t   clinums;    \/\/connections num;accept new connection->clinums--;destroy a connection->clinums++;$/;"	v	file:
data	include/ss_str.h	/^    char *data;$/;"	m	struct:s_str_s
eearr	ss_event.c	/^static  ss_epoll_event_t    eearr[SS_NEVENTS];$/;"	v	file:
ep	ss_event.c	/^static  ss_int_t    ep;$/;"	v	file:
errlog	main.c	/^ss_log_t    errlog;$/;"	v
fd	include/ss_event.h	/^    ss_sockfd_t         fd;$/;"	m	struct:ss_event_s
fd	include/ss_file.h	/^    ss_int_t        fd;\/\/if the file is not opened,the fd will be -1$/;"	m	struct:ss_file_s
fd	include/ss_socket.h	/^    ss_sockfd_t         fd;$/;"	m	struct:ss_listen_s
file	include/ss_log.h	/^    ss_file_t *file;$/;"	m	struct:ss_log_s
fileconf	main.c	/^ss_map_t    *fileconf;$/;"	v
fileinfo	include/ss_file.h	/^    ss_fileinfo_t   *fileinfo; $/;"	m	struct:ss_file_s
filename	include/ss_file.h	/^    ss_str_t        filename;$/;"	m	struct:ss_file_s
flag	include/ss_file.h	/^    ss_uint_t       flag;$/;"	m	struct:ss_file_s
handle_event_pt	include/ss_event.h	/^typedef void    (*handle_event_pt)(ss_event_t *);$/;"	t
handler	include/ss_event.h	/^    handle_event_pt     handler;$/;"	m	struct:ss_event_s
host	include/ss_event.h	/^    ss_str_t    host;$/;"	m	struct:ss_http_request_s
http_version	include/ss_event.h	/^    ss_uint_t   http_version;\/\/1 for 1.0;2 for 2.0; 3 for OTHER$/;"	m	struct:ss_http_request_s
key	include/ss_config.h	/^    char        *key;$/;"	m	struct:ss_map_s
kp_alive	include/ss_event.h	/^    ss_int_t    kp_alive;   \/\/0 for close,1 for keep-alive$/;"	m	struct:ss_http_request_s
len	include/ss_str.h	/^    ss_uint_t len;$/;"	m	struct:s_str_s
listen	include/ss_event.h	/^    ss_listen_t *listen;$/;"	m	struct:ss_http_request_s
listen	main.c	/^ss_listen_t listen;$/;"	v
log	include/ss_event.h	/^    ss_log_t            *log;$/;"	m	struct:ss_event_s
log	include/ss_event.h	/^    ss_log_t    *log;    $/;"	m	struct:ss_http_request_s
logfile	main.c	/^ss_file_t   logfile;$/;"	v
main	main.c	/^int main(int argc, char *argv[])$/;"	f
max	include/ss_mem.h	/^    ss_uint_t   max;$/;"	m	struct:ss_pool_s
method	include/ss_event.h	/^    ss_uint_t   method;\/\/1 for GET, 2 for POST, 3 for OTHER$/;"	m	struct:ss_http_request_s
next	include/ss_config.h	/^    ss_map_t    *next;   $/;"	m	struct:ss_map_s
next	include/ss_mem.h	/^    ss_pool_t   *next;$/;"	m	struct:ss_pool_s
now	include/ss_mem.h	/^    void        *now;$/;"	m	struct:ss_pool_s
pool	include/ss_event.h	/^    ss_pool_t   *pool;$/;"	m	struct:ss_http_request_s
port	include/ss_socket.h	/^    ss_int_t            port;$/;"	m	struct:ss_listen_s
request	include/ss_event.h	/^    ss_http_request_t   *request;$/;"	m	struct:ss_event_s
s:l	my.vim	/^let s:l = 21 - ((20 * winheight(0) + 16) \/ 33)$/;"	v
s:so_save	my.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:sx	my.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	my.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
s_str_s	include/ss_str.h	/^typedef struct s_str_s {$/;"	s
sockaddr_in	include/ss_socket.h	/^    ss_sockaddr_in_t    sockaddr_in;$/;"	m	struct:ss_listen_s
sockaddr_len	include/ss_socket.h	/^    ss_uint_t           sockaddr_len;$/;"	m	struct:ss_listen_s
ss_accept_conn	ss_event.c	/^ss_accept_conn(ss_event_t *ev)$/;"	f	file:
ss_add_event	ss_event.c	/^ss_add_event(ss_event_t *ev, ss_uint_t etype)$/;"	f	file:
ss_alloc_from_pool	ss_mem.c	/^ss_alloc_from_pool(ss_pool_t *pool, ss_uint_t size)$/;"	f
ss_alloc_request	ss_event.c	/^ss_alloc_request(ss_uint_t psize)$/;"	f	file:
ss_close_file	include/ss_file.h	21;"	d
ss_create_pool	ss_mem.c	/^ss_create_pool(ss_uint_t size)$/;"	f
ss_daemonize	ss_deamon.c	/^ss_daemonize()$/;"	f
ss_del_event	ss_event.c	/^ss_del_event(ss_event_t *ev)$/;"	f	file:
ss_dup	include/ss_file.h	25;"	d
ss_dup2	include/ss_file.h	26;"	d
ss_epoll_event_t	include/ss_event.h	/^typedef struct epoll_event          ss_epoll_event_t;$/;"	t	typeref:struct:epoll_event
ss_event_cycle	ss_event.c	/^ss_event_cycle(ss_listen_t *listen, ss_log_t *errlog)$/;"	f
ss_event_s	include/ss_event.h	/^struct ss_event_s {$/;"	s
ss_event_t	include/ss_event.h	/^typedef struct ss_event_s           ss_event_t;$/;"	t	typeref:struct:ss_event_s
ss_file_s	include/ss_file.h	/^typedef struct ss_file_s {$/;"	s
ss_file_t	include/ss_file.h	/^}ss_file_t;$/;"	t	typeref:struct:ss_file_s
ss_fileinfo_t	include/ss_file.h	/^typedef struct stat             ss_fileinfo_t;$/;"	t	typeref:struct:stat
ss_format_time	ss_time.c	/^ss_format_time(char *t, const int maxsize)$/;"	f
ss_free_pool	ss_mem.c	/^ss_free_pool(ss_pool_t *first)$/;"	f
ss_get_dir	main.c	/^ss_get_dir(char *arg, char **dirnamep)$/;"	f	file:
ss_http_request_s	include/ss_event.h	/^struct ss_http_request_s {$/;"	s
ss_http_request_t	include/ss_event.h	/^typedef struct ss_http_request_s    ss_http_request_t;$/;"	t	typeref:struct:ss_http_request_s
ss_int_t	include/ss_config.h	/^typedef int             ss_int_t;$/;"	t
ss_listen_init	ss_socket.c	/^ss_listen_init(ss_listen_t *listen)$/;"	f
ss_listen_s	include/ss_socket.h	/^typedef struct ss_listen_s {$/;"	s
ss_listen_t	include/ss_socket.h	/^}ss_listen_t;$/;"	t	typeref:struct:ss_listen_s
ss_log_init	main.c	/^ss_log_init()$/;"	f	file:
ss_log_s	include/ss_log.h	/^typedef struct ss_log_s {$/;"	s
ss_log_t	include/ss_log.h	/^}ss_log_t;$/;"	t	typeref:struct:ss_log_s
ss_map_s	include/ss_config.h	/^struct ss_map_s{$/;"	s
ss_map_t	include/ss_config.h	/^typedef struct ss_map_s ss_map_t;$/;"	t	typeref:struct:ss_map_s
ss_null_string	include/ss_str.h	12;"	d
ss_open_file	include/ss_file.h	19;"	d
ss_parse_config	main.c	/^ss_parse_config()$/;"	f	file:
ss_pool_s	include/ss_mem.h	/^struct ss_pool_s {$/;"	s
ss_pool_t	include/ss_mem.h	/^typedef struct ss_pool_s    ss_pool_t;$/;"	t	typeref:struct:ss_pool_s
ss_read_file	include/ss_file.h	22;"	d
ss_recv	ss_event.c	/^ss_recv(ss_event_t *ev)$/;"	f	file:
ss_sockaddr_in_t	include/ss_socket.h	/^typedef struct sockaddr_in  ss_sockaddr_in_t;$/;"	t	typeref:struct:sockaddr_in
ss_sockaddr_t	include/ss_socket.h	/^typedef struct sockaddr     ss_sockaddr_t;$/;"	t	typeref:struct:sockaddr
ss_sockfd_t	include/ss_socket.h	/^typedef int                 ss_sockfd_t;$/;"	t
ss_stderr_log	ss_log.c	/^ss_stderr_log(const char *fmt, ...)$/;"	f
ss_str_t	include/ss_str.h	/^}ss_str_t;$/;"	t	typeref:struct:s_str_s
ss_tm_t	include/ss_time.h	/^typedef struct tm   ss_tm_t;$/;"	t	typeref:struct:tm
ss_uchar_t	include/ss_config.h	/^typedef unsigned char   ss_uchar_t;$/;"	t
ss_uint_t	include/ss_config.h	/^typedef unsigned int    ss_uint_t;$/;"	t
ss_write_file	include/ss_file.h	23;"	d
ss_write_log	ss_log.c	/^ss_write_log(ss_log_t *log, const char *fmt, ...)$/;"	f
start	include/ss_mem.h	/^    void        *start;$/;"	m	struct:ss_pool_s
uri	include/ss_event.h	/^    ss_str_t    uri;$/;"	m	struct:ss_http_request_s
value	include/ss_config.h	/^    char        *value;$/;"	m	struct:ss_map_s
workdir	main.c	/^static char *workdir;$/;"	v	file:
zt	my.vim	/^normal! zt$/;"	m
